{"version":3,"file":"encrypttransfer.min.js","sources":["../src/encrypttransfer.js"],"sourcesContent":["/**\r\n * This JS file automatically transfer data post between coderunnerex question client and server.\r\n */\r\ndefine([], function() {\r\n\r\n    const ENCRYPT_HTML_PLACEHOLDER_CLASS_NAME = 'CodeRunnerEx-EncPlaceholder';\r\n    const ENCRYPTED_FORM_CONTROL_NAME_SUFFIX = '_encrypted';\r\n\r\n    // const ENCRYPT_CODE_PREFIX = '[[enc]]';\r\n    function encryptString(string) {\r\n        return btoa(String.fromCharCode(...new TextEncoder().encode(string)));\r\n    }\r\n    function decryptString(string) {\r\n        return new TextDecoder().decode(Uint8Array.from(atob(string), (c) => c.charCodeAt(0)))\r\n        /*\r\n        let s = string;\r\n        s = s.replaceAll('+', ' ');\r\n        s = decodeURIComponent(atob(s));\r\n        return s;\r\n        */\r\n    }\r\n\r\n    function getQuestionRootElem(doc, questionResponseFieldElem) {\r\n        let currElem = questionResponseFieldElem;\r\n        while (currElem && currElem !== doc.body && !currElem.classList.contains('que'))\r\n            currElem = currElem.parentNode;\r\n        return currElem;\r\n    }\r\n\r\n    function decryptPlaceHolderElem(doc, placeholder) {\r\n        const data = placeholder.getAttribute('data-raw');\r\n        const html = decryptString(data);\r\n        // console.log('decode html', data, html);\r\n        const dummyElem = doc.createElement('div');\r\n        dummyElem.innerHTML = html;\r\n        const fragment = doc.createDocumentFragment();\r\n        for (let i = 0, l = dummyElem.children.length; i < l; ++i) {\r\n            fragment.appendChild(dummyElem.children[i]);\r\n        }\r\n        placeholder.replaceWith(fragment);\r\n        return html;\r\n    }\r\n    function decryptCodeEditor(doc, placeholder, codeEditorPlugin) {\r\n        // when handling code editor, we need to find the associated textarea element and fill the content of it.\r\n        // if the related ace editor is created already, we even need to fill the ace editor manually\r\n        const code = decryptString(placeholder.getAttribute('data-raw'));\r\n\r\n        const targetId = placeholder.getAttribute('data-target-id');\r\n        const targetElem = doc.getElementById(targetId);\r\n        if (targetElem)\r\n            targetElem.innerHTML = code;\r\n\r\n        const codeContent = targetElem.value;  // convert the HTML entities in code to normal chars\r\n\r\n        // console.log('decrypt', codeContent);\r\n\r\n        // check if the assoc ace editor has already be created\r\n        if (codeEditorPlugin === 'none') {  // pure textarea\r\n            // nothing need to be done here\r\n        } else if (codeEditorPlugin === 'scratchpad') {\r\n            _fillCodeEditor_scratchpad(doc, targetId, codeContent);\r\n        } else {   // ace\r\n            _fillCodeEditor_ace(doc, targetId, codeContent);\r\n        }\r\n\r\n        // finally remove the placeholder\r\n        placeholder.remove();\r\n    }\r\n    function _fillCodeEditor_ace(doc, targetId, content) {\r\n        if (window.ace) {\r\n            const richEditorWrapperId = targetId + '_wrapper';\r\n            const richEditorWrapperElem = doc.getElementById(richEditorWrapperId);\r\n            if (richEditorWrapperElem) {\r\n                const aceEditorElem = richEditorWrapperElem.getElementsByClassName('ace_editor')[0];\r\n                if (aceEditorElem) {\r\n                    _setAceEditorContent(aceEditorElem, content);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function _fillCodeEditor_scratchpad(doc, targetId, content) {\r\n        if (!content)  // empty content, no need to fill the editors\r\n            return;\r\n        try {\r\n            const obj = JSON.parse(content);\r\n            // console.log('json', obj);\r\n            if (window.ace) {\r\n                const codeEditorWrapperId = targetId + '_answer-code_wrapper';\r\n                const codeEditorWrapperElem = doc.getElementById(codeEditorWrapperId);\r\n                if (codeEditorWrapperElem) {\r\n                    const aceEditorElem = codeEditorWrapperElem.getElementsByClassName('ace_editor')[0];\r\n                    if (aceEditorElem) {\r\n                        _setAceEditorContent(aceEditorElem, obj.answer_code.join('\\n'));\r\n                    }\r\n                }\r\n                const testEditorWrapperId = targetId + '_test-code_wrapper';\r\n                const testEditorWrapperElem = doc.getElementById(testEditorWrapperId);\r\n                if (testEditorWrapperElem) {\r\n                    const aceEditorElem = testEditorWrapperElem.getElementsByClassName('ace_editor')[0];\r\n                    if (aceEditorElem) {\r\n                        _setAceEditorContent(aceEditorElem, obj.test_code.join('\\n'));\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // content not JSON, fallback\r\n            _fillCodeEditor_ace(doc, targetId, content);\r\n            return;\r\n        }\r\n    }\r\n    function _setAceEditorContent(elem, content) {\r\n        const aceEditor = ace.edit(elem);\r\n        session = aceEditor.getSession();\r\n        session.setValue(content);\r\n    }\r\n\r\n    function initServerDataDecryptor(doc, questionRootElem) {\r\n        // console.log('encryptServerDataTransfer');\r\n        let targetParent = questionRootElem || doc.body;  // doc.getElementById('responseform');\r\n        if (targetParent) {\r\n            const encryptedPlaceHolders = targetParent.querySelectorAll('.' + ENCRYPT_HTML_PLACEHOLDER_CLASS_NAME);\r\n            for (let i = 0, l = encryptedPlaceHolders.length; i < l; ++i) {\r\n                const codeEditorPlugin = encryptedPlaceHolders[i].getAttribute('data-code-editor');\r\n                if (codeEditorPlugin)\r\n                    decryptCodeEditor(doc, encryptedPlaceHolders[i], codeEditorPlugin);\r\n                else\r\n                    decryptPlaceHolderElem(doc, encryptedPlaceHolders[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // for debug\r\n    function initServerDataDecryptorDelay(doc, questionRootElem) {\r\n        setTimeout(initServerDataDecryptor.bind(null, doc, questionRootElem), 5000);\r\n    }\r\n\r\n\r\n    function prepareClientEncryptReponseControls(doc, form, responseFieldElem) {\r\n        const hiddenElem = doc.createElement('input');\r\n        hiddenElem.type = 'hidden';\r\n        hiddenElem.name = responseFieldElem.name + ENCRYPTED_FORM_CONTROL_NAME_SUFFIX;\r\n        hiddenElem.id = responseFieldElem.id + ENCRYPTED_FORM_CONTROL_NAME_SUFFIX;\r\n\r\n        // clear the original response field name, avoid submitting to server\r\n        responseFieldElem.name = '';\r\n\r\n        responseFieldElem.parentNode.insertBefore(hiddenElem, responseFieldElem);\r\n    }\r\n\r\n    function initClientDataEncryptor(doc, questionRootElem, questionResponseFieldElem) {\r\n        let targetForm = questionResponseFieldElem.form;\r\n        if (targetForm && questionResponseFieldElem && !questionResponseFieldElem.__clientDataEncryptorPrepared__) {\r\n            prepareClientEncryptReponseControls(doc, targetForm, questionResponseFieldElem);\r\n\r\n            targetForm.addEventListener('submit', function(e) {\r\n                encrypClientDataInForm(targetForm);\r\n            });\r\n            questionResponseFieldElem.__clientDataEncryptorPrepared__ = true;\r\n        }\r\n    }\r\n\r\n    function getUserResponseControlsInForm(form) {\r\n        let result = [];\r\n        const elems = form.getElementsByTagName('textarea');\r\n        for (let i = 0; i < elems.length; i++) {\r\n            let elem = elems[i];\r\n            if (elem.id && elem.id.match(/.+\\_answer/)) {\r\n                result.push(elem);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function encrypClientDataInForm(form) {\r\n        const elems = getUserResponseControlsInForm(form);\r\n        for (let i = 0; i < elems.length; i++) {\r\n            let elem = elems[i];\r\n            let id = elem.id + ENCRYPTED_FORM_CONTROL_NAME_SUFFIX;\r\n            let hiddenElem = document.getElementById(id);\r\n            if (hiddenElem) {\r\n                hiddenElem.value = encryptString(elem.value);\r\n                console.log('encrypted data', hiddenElem.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function init({doc, encryptServerDataTransfer, encryptClientDataTransfer, responseFieldId}) {\r\n        if (!doc)\r\n            doc = document;\r\n\r\n        // console.log('init data transfer', doc.encrypttransfer_inited);\r\n\r\n        const doInit = (doc) => {\r\n            const questionResponseFieldElem = doc.getElementById(responseFieldId);\r\n            const questionRootElem = getQuestionRootElem(doc, questionResponseFieldElem);\r\n            if (questionRootElem) {\r\n                if (encryptServerDataTransfer)\r\n                    initServerDataDecryptor(doc, questionRootElem);\r\n                if (encryptClientDataTransfer)\r\n                    initClientDataEncryptor(doc, questionRootElem, questionResponseFieldElem);\r\n            }\r\n        }\r\n\r\n        if (document.readyState === \"loading\") {\r\n            doc.addEventListener('DOMContentLoaded', function (e) {\r\n                doInit(doc);\r\n            });\r\n        } else {\r\n            doInit(doc);\r\n        }\r\n\r\n        /*\r\n        // for debug\r\n        doc.body.addEventListener('dblclick', function (e) {\r\n            doInit(doc);\r\n        });\r\n        */\r\n\r\n    }\r\n\r\n    return { init };\r\n});"],"names":["define","encryptString","string","btoa","String","fromCharCode","TextEncoder","encode","decryptString","TextDecoder","decode","Uint8Array","from","atob","c","charCodeAt","decryptPlaceHolderElem","doc","placeholder","html","getAttribute","dummyElem","createElement","innerHTML","fragment","createDocumentFragment","i","l","children","length","appendChild","replaceWith","decryptCodeEditor","codeEditorPlugin","code","targetId","targetElem","getElementById","codeContent","value","content","obj","JSON","parse","window","ace","codeEditorWrapperId","codeEditorWrapperElem","aceEditorElem","getElementsByClassName","_setAceEditorContent","answer_code","join","testEditorWrapperId","testEditorWrapperElem","test_code","e","_fillCodeEditor_ace","_fillCodeEditor_scratchpad","remove","richEditorWrapperId","richEditorWrapperElem","elem","aceEditor","edit","session","getSession","setValue","initServerDataDecryptor","questionRootElem","targetParent","body","encryptedPlaceHolders","querySelectorAll","initClientDataEncryptor","questionResponseFieldElem","targetForm","form","__clientDataEncryptorPrepared__","responseFieldElem","hiddenElem","type","name","id","parentNode","insertBefore","prepareClientEncryptReponseControls","addEventListener","elems","result","getElementsByTagName","match","push","getUserResponseControlsInForm","document","console","log","encrypClientDataInForm","init","encryptServerDataTransfer","encryptClientDataTransfer","responseFieldId","doInit","currElem","classList","contains","getQuestionRootElem","readyState"],"mappings":"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"}