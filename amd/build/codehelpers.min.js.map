{"version":3,"file":"codehelpers.min.js","sources":["../src/codehelpers.js"],"sourcesContent":["// define(['core/str'], function(CoreStr) {\r\ndefine(['qtype_coderunnerex/localresmanager'], function({localResManager}) {\r\n\r\n    // const of element class names\r\n    const CN_CODE_HELPER = 'CodeRunnerEx-CodeHelper';\r\n    const CN_CODE_HELPER_NORMAL_MODE = 'NormalMode';\r\n    const CN_CODE_HELPER_SIMPLE_MODE = 'SimpleMode';\r\n    const CN_CODE_HELPER_AI_THUMBNAIL = 'Thumbnail';\r\n    const CN_CODE_HELPER_INPUT_SECTION = 'InputSection';\r\n    const CN_CODE_HELPER_INPUT_SUBMITTER = 'InputSubmitter';\r\n    const CN_CODE_HELPER_USAGE_COUNT_REMINDER = 'UsageCountReminder';\r\n    const CN_CODE_HELPER_PANEL_TOGGLER = 'PanelToggler';\r\n    const CN_CODE_HELPER_AI_QINPUT_CONTAINER = 'QInputContainer';\r\n    const CN_CODE_HELPER_AI_QINPUT = 'QInput';\r\n    const CN_CODE_HELPER_AI_RESPONDER = 'Responder';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT = 'ResponderContent';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_GROUP = 'ResponderGroup';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_SECTION = 'ResponderSection';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_QUESTION = 'UserQuestion' + ' comment';  // 'comment' for the background style of question block\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE = 'Response';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION = 'ResponseSection';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_TITLE = 'ResponseSectionTitle';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CONTENT = 'ResponseSectionContent';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CODE = 'ResponseSectionCode';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CODE_OMITTED = 'ResponseSectionCodeOmitted';\r\n    const CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_RATING = 'UserRating';\r\n    const CN_CODE_HELPER_PANEL_BACKGROUND = 'BackgroundPanel';\r\n    const CN_CODE_HELPER_BUTTON_TEXT = 'ButtonText';\r\n    const CN_CODE_HELPER_BUTTON_ASSOC = 'ButtonAssoc';\r\n\r\n    const CN_CODE_HELPER_COLLAPSED = 'Collapsed';\r\n    const CN_CODE_HELPER_EXPANDED = 'Expanded';\r\n    const CN_CODE_HELPER_ELEM_HIDE = 'Hide';\r\n\r\n    const CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_PENDING = 'Pending';\r\n    const CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_FULFILLED = 'Fulfilled';\r\n    const CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_REJECTED = 'Rejected';\r\n\r\n    // class for rating widget\r\n    const CN_USER_RATING_WIDGET = 'UserRatingWidget';\r\n    const CN_USER_RATING_WIDGET_RATED = 'Rated';\r\n    const CN_USER_RATING_WIDGET_UNRATED = 'Unrated';\r\n    const CN_USER_RATING_WIDGET_LINK = 'UserRatingLink';\r\n    const CN_USER_RATING_WIDGET_LINK_POSITIVE = 'Positive';\r\n    const CN_USER_RATING_WIDGET_LINK_NEGATIVE = 'Negative';\r\n    const CN_USER_RATING_WIDGET_LINK_RATED = 'Active';\r\n\r\n    class CodeHelperHistoryDisplayMode {\r\n        // only display history of current interaction\r\n        static SHOWN_SESSION = 0;\r\n        // display all history data, loading them from database\r\n        static SHOWN_ALL = 1;\r\n        // hide all history, only displays the last interaction\r\n        static SHOWN_ACTIVE = 2;\r\n    }\r\n\r\n    /*\r\n     * A special class to manage the localization strings from Moodle.\r\n     */\r\n    /*\r\n    class LocalResManager {\r\n        constructor() {\r\n            this._localRes = {};\r\n        }\r\n        // methods about retrieving localization strings from PHP server\r\n        async _getLocalString(stringId, componentName = 'coderunnerex') {\r\n            let result = this._getCachedLocalString(stringId, componentName);\r\n            if (result !== undefined)\r\n                return result;\r\n\r\n            // load Moodle Local Strings by AJAX\r\n            result = await CoreStr.get_string(stringId, componentName);\r\n            this._setCachedLocalString(stringId, componentName, result);\r\n            return result;\r\n        }\r\n        async getLocalStrings(stringIds, componentName = 'qtype_coderunnerex') {\r\n            let result = {};\r\n            const uncachedIds = [];\r\n            for (const stringId of stringIds) {\r\n                result[stringId] = this._getCachedLocalString(stringId, componentName);\r\n                if (result[stringId] === undefined)\r\n                    uncachedIds.push(stringId);\r\n            }\r\n            const params = uncachedIds.map(id => { return {key: id, component: componentName} });\r\n            // console.log('string params', params);\r\n            // console.log(await CoreStr.get_string(params[0].key, params[0].component), await CoreStr.get_string('pluginname', 'qtype_coderunnerex'));\r\n            const fetchResult = await CoreStr.get_strings(params);\r\n            uncachedIds.forEach((id, index) => {\r\n                result[id] = fetchResult[index];\r\n                this._setCachedLocalString(id, componentName, fetchResult[index]);\r\n            });\r\n            return result;\r\n        }\r\n        _getCachedLocalString(stringId, componentName) {\r\n            const key = `${componentName}:${stringId}`;\r\n            return this._localRes[key];\r\n        }\r\n        _setCachedLocalString(stringId, componentName, value) {\r\n            const key = `${componentName}:${stringId}`;\r\n            this._localRes[key] = value;\r\n        }\r\n    }\r\n    const localResManager = new LocalResManager();\r\n    */\r\n\r\n    /**\r\n     * Stores the data of request/response of Ai helper,\r\n     * to be displayed in CodeHelper responser panel.\r\n     */\r\n    class AiHelperDataRecord {\r\n        static STATE_PENDING = 0;\r\n        static STATE_REJECTED = -1;\r\n        static STATE_FULFILLED = 1;\r\n\r\n        constructor(id, {userQuestion = null, response = null, userRating = null, dbId = null, state = AiHelperDataRecord.STATE_PENDING}) {\r\n            this._id = id;\r\n            this.update({userQuestion, response, userRating, dbId, state});\r\n\r\n            this._onupdate = null;\r\n        }\r\n\r\n        update({id = undefined, userQuestion = undefined, response = undefined, userRating = undefined, dbId = undefined, state = undefined}) {\r\n            if (id !== undefined)\r\n                this._id = id;\r\n            if (dbId !== undefined)\r\n                this._dbId = dbId;\r\n            if (userQuestion !== undefined)\r\n                this._userQuestion = userQuestion;\r\n            if (response !== undefined)\r\n                this._response = response;\r\n            if (userRating !== undefined)\r\n                this._userRating = userRating;\r\n            if (state !== undefined)\r\n                this._state = state;\r\n\r\n            if (this.onupdate)\r\n                this.onupdate(this);\r\n        }\r\n\r\n        get id() {\r\n            return this._id;\r\n        }\r\n        set id(value) {\r\n            this._id = value;\r\n        }\r\n        get dbId() {\r\n            return this._dbId;\r\n        }\r\n        set dbId(value) {\r\n            this._dbId = value;\r\n        }\r\n        get userQuestion() {\r\n            return this._userQuestion;\r\n        }\r\n        get response() {\r\n            return this._response;\r\n        }\r\n        get userRating() {\r\n            return this._userRating;\r\n        }\r\n        get state() {\r\n            return this._state;\r\n        }\r\n        get onupdate() {\r\n            return this._onupdate;\r\n        }\r\n        set onupdate(callback) {\r\n            this._onupdate = callback;\r\n        }\r\n    }\r\n\r\n    class AiHelperDataRecordList {\r\n        constructor() {\r\n            this._data = [];\r\n            this._onupdate = null;\r\n        }\r\n\r\n        _reactRecordUpdate(record) {\r\n            if (this._onupdate)\r\n                this._onupdate(record.id, record);\r\n        }\r\n\r\n        getRecordById(id) {\r\n            return this._data.find(record => record.id === id);\r\n        }\r\n\r\n        // returns the newly pushed record id\r\n        push(id, {dbId = null, userQuestion = null, response = null, userRating = null, state = AiHelperDataRecord.STATE_PENDING}) {\r\n            if (!id) {\r\n                const timestamp = Date.now();\r\n                id = timestamp + '-' + this.length;\r\n            }\r\n            const data = new AiHelperDataRecord(id, {dbId, userQuestion, response, userRating, state});\r\n            this._data.push(data);\r\n            data.onupdate = this._reactRecordUpdate.bind(this);\r\n            data.onupdate(data);  // trigger the update callback, since the data has newly been created\r\n            return data.id;\r\n        }\r\n        updateRecord(oldId, {id = undefined, dbId = undefined, userQuestion = undefined, response = undefined, userRating = undefined, state = undefined}) {\r\n            const record = this.getRecordById(oldId);\r\n            if (record) {\r\n                if (id === undefined)\r\n                    id = oldId;\r\n                record.update({id, dbId, userQuestion, response, userRating, state});\r\n                return id;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        clear() {\r\n            this._data = [];\r\n        }\r\n\r\n        get(index) {\r\n            return this._data[index];\r\n        }\r\n        get length() {\r\n            return this._data.length;\r\n        }\r\n        get data() {\r\n            return this._data;\r\n        }\r\n        get onupdate() {\r\n            return this._onupdate;\r\n        }\r\n        set onupdate(callback) {\r\n            this._onupdate = callback;\r\n        }\r\n    }\r\n\r\n    class UserRatingWidget {\r\n        constructor (doc, parentElem, rateOnlyOnce = true, initialValue = null) {\r\n            this._rateOnlyOnce = rateOnlyOnce;\r\n            this._value = initialValue;\r\n            this._createElems(doc).then(\r\n                elem => {\r\n                    this._elem = elem;\r\n                    if (parentElem)\r\n                        parentElem.appendChild(this._elem);\r\n                }\r\n            );\r\n        }\r\n\r\n        async _createElems(doc) {\r\n            const result = doc.createElement('div');\r\n            result.className = CN_USER_RATING_WIDGET;\r\n\r\n            // leading label\r\n            const labelElem = doc.createElement('label');\r\n            result.appendChild(labelElem);\r\n\r\n            // element to vote up/down\r\n            const ratingParent = doc.createElement('ul');\r\n\r\n            // initialize all local strings needed for this class\r\n            const localStrings = await localResManager.getLocalStrings([\r\n                'codehelper_user_rate_positive',\r\n                'codehelper_user_rate_negative',\r\n                'codehelper_user_rate_label_before_rating',\r\n                'codehelper_user_rate_label_after_rating'\r\n            ]);\r\n\r\n            const linkProps = [\r\n                {value: 1, text: localStrings['codehelper_user_rate_positive'], title: localStrings['codehelper_user_rate_positive'], className: CN_USER_RATING_WIDGET_LINK_POSITIVE},\r\n                {value: -1, text: localStrings['codehelper_user_rate_negative'], title: localStrings['codehelper_user_rate_negative'], className: CN_USER_RATING_WIDGET_LINK_NEGATIVE}\r\n            ];\r\n\r\n            linkProps.forEach(prop => {\r\n                const item = doc.createElement('li');\r\n                item.classList.add(CN_USER_RATING_WIDGET_LINK);\r\n                item.classList.add(prop.className);\r\n                item.setAttribute('data-value', prop.value);\r\n                item.setAttribute('title', prop.title);\r\n\r\n                const textElem = doc.createElement('span');\r\n                textElem.innerText = prop.text;\r\n                item.appendChild(textElem);\r\n\r\n                ratingParent.appendChild(item);\r\n                item.onclick = this._reactRateLinkClick.bind(this);\r\n            });\r\n\r\n            result.appendChild(ratingParent);\r\n\r\n            await this._updateWithRatingStatus(result);\r\n\r\n            return result;\r\n        }\r\n\r\n        async _updateWithRatingStatus(targetElem) {\r\n            const localStrings = await localResManager.getLocalStrings([\r\n                'codehelper_user_rate_label_before_rating',\r\n                'codehelper_user_rate_label_after_rating'\r\n            ]);\r\n\r\n            if (!targetElem)\r\n                targetElem = this._elem;\r\n            if (!targetElem)  // haven't intialized yet\r\n                return;\r\n\r\n            if (this.isRated) {\r\n                targetElem.classList.add(CN_USER_RATING_WIDGET_RATED);\r\n                targetElem.classList.remove(CN_USER_RATING_WIDGET_UNRATED);\r\n            }\r\n            else {\r\n                targetElem.classList.add(CN_USER_RATING_WIDGET_UNRATED);\r\n                targetElem.classList.remove(CN_USER_RATING_WIDGET_RATED);\r\n            }\r\n\r\n            // label\r\n            const labelElem = targetElem.querySelector('label');\r\n            labelElem.innerText = this.isRated? localStrings['codehelper_user_rate_label_after_rating']: localStrings['codehelper_user_rate_label_before_rating'];\r\n\r\n            // vote links\r\n            const links = targetElem.querySelectorAll('.' + CN_USER_RATING_WIDGET_LINK);\r\n            links.forEach(link => {\r\n                const rating = parseInt(link.getAttribute('data-value'));\r\n                if (rating === this.value) {\r\n                    link.classList.add(CN_USER_RATING_WIDGET_LINK_RATED);\r\n                } else {\r\n                    link.classList.remove(CN_USER_RATING_WIDGET_LINK_RATED);\r\n                }\r\n            })\r\n        }\r\n\r\n        _reactRateLinkClick(event) {\r\n            if (!this.isRated || !this.rateOnlyOnce) {\r\n                const target = event.currentTarget;\r\n                const rating = parseInt(target.getAttribute('data-value'));\r\n                const oldValue = this.value;\r\n                if (oldValue !== rating) {\r\n                    this.value = rating;\r\n                    if (this.onchange) {\r\n                        this.onchange(this, this.value, oldValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        get value() {\r\n            return this._value;\r\n        }\r\n        set value(rating) {\r\n            const newValue = parseInt(rating);\r\n            if (newValue !== this.value) {\r\n                this._value = newValue;\r\n                this._updateWithRatingStatus(); // await\r\n            }\r\n        }\r\n\r\n        get rateOnlyOnce() {\r\n            return this._rateOnlyOnce;\r\n        }\r\n        set rateOnlyOnce(value) {\r\n            this._rateOnlyOnce = !!value;\r\n        }\r\n\r\n        get isRated() {\r\n            return !!this.value;\r\n        }\r\n    }\r\n\r\n\r\n    class CodeHelper {\r\n        constructor(doc, { placeHolderId, targetEditorId, questionDataEmbedderId, aiRequestUrl, aiRateUrl, aiHelperPredefinedQuestions, aiHelperRemainingUsageCount,\r\n            enableCustomQuestion, enableUserRating, readOnly, historyDisplayMode, useSimpleMode }) {\r\n            this._readOnly = readOnly;  // if readonly, means we are in review mode\r\n            this._historyDisplayMode = historyDisplayMode;  // in review mode, all history will be displayed regardless of this option\r\n            this._simpleMode = useSimpleMode;\r\n\r\n            this._aiRequestUrl = aiRequestUrl;\r\n            this._aiRateUrl = aiRateUrl;\r\n            this._aiHelperPredefinedQuestions = aiHelperPredefinedQuestions || [];\r\n            this._targetRawEditor = this._getTargetRawCodeEditorElem(doc, targetEditorId);\r\n            this._targetEditor = this._getTargetCodeEditorWrapperElem(doc, targetEditorId);\r\n            this._id = placeHolderId + '_cr_ex_codehelper';\r\n            this._component = {};\r\n            this._qMetaData = this._retrieveQuestionMetaData(doc, questionDataEmbedderId);\r\n            this._enableCustomQuestion = enableCustomQuestion;\r\n            this._enableUserRating = enableUserRating;\r\n\r\n            this._aiHelperRecords = new AiHelperDataRecordList();  // stores the question and response of AI helper interactions\r\n            this._aiHelperRecords.onupdate = this.reactAiHelperRecordsUpdate.bind(this);\r\n            this._aiHelperRecordsHistoryRetrieved = false;\r\n\r\n            // this._aiHelperRequestThrottledDelay = 1500;  // TODO: now fixed\r\n\r\n            this._createAndInsertWidget(doc, placeHolderId, {useSimpleMode, enableCustomQuestion})\r\n                .then(() => {\r\n                    // update the usage count reminder after widgets created\r\n                    this.aiHelperRemainingUsageCount = aiHelperRemainingUsageCount;\r\n                });\r\n        }\r\n\r\n        // methods about retrieving question information\r\n        _retrieveQuestionMetaData(doc, questionDataEmbedderId) {\r\n            const elem = doc.getElementById(questionDataEmbedderId);\r\n            let result = {};\r\n            if (elem) {\r\n                /*\r\n                const sQuestionData = elem.getAttribute('data-question');\r\n                const sAttemptData = elem.getAttribute('data-last-attempt-step');\r\n\r\n                if (sQuestionData)\r\n                    result.questionData = JSON.parse(atob(sQuestionData));\r\n                if (sAttemptData)\r\n                    result.lastAttemptStepData = JSON.parse(atob(sAttemptData));\r\n                */\r\n                result.questionAttemptId = elem.getAttribute('data-question-attempt-id');\r\n                result.questionAttemptStepId = elem.getAttribute('data-question-attempt-step-id');\r\n                result.questionUsageId = elem.getAttribute('data-question-usage-id');\r\n                result.slot = elem.getAttribute('data-slot');\r\n                result.cmId = elem.getAttribute('data-cm-id');\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        // methods about widget creation\r\n        _getTargetRawCodeEditorElem(doc, id) {\r\n            return doc.getElementById(id);\r\n        }\r\n        _getTargetCodeEditorWrapperElem(doc, rawId) {\r\n            const wrapperId = rawId + '_wrapper';\r\n            return doc.getElementById(wrapperId);\r\n        }\r\n\r\n        async _createWidget(doc, {useSimpleMode, enableCustomQuestion}) {\r\n            const self = this;\r\n\r\n            // initialize all local strings needed for this class\r\n            const localStrings = await localResManager.getLocalStrings([\r\n                'codehelper_thumbnail_caption',\r\n                'codehelper_thumbnail_hint',\r\n                'codehelper_thumbnail_caption_simple_mode',\r\n                'codehelper_thumbnail_caption_simple_mode_hint',\r\n                'codehelper_collapsor_hint',\r\n                'codehelper_ask_submit_caption',\r\n                'codehelper_ask_submit_hint',\r\n                'codehelper_ask_input_placeholder',\r\n                'codehelper_ask_select_placeholder',\r\n                'err_code_helper_empty_ask',\r\n                'codehelper_ai_usage_count_reminder_hint',\r\n                'codehelper_user_rate_positive',\r\n                'codehelper_user_rate_negative'\r\n            ]);\r\n\r\n            const result = doc.createElement('section');\r\n            result.className = CN_CODE_HELPER + ' ' + CN_CODE_HELPER_COLLAPSED;\r\n            if (useSimpleMode)\r\n                result.classList.add(CN_CODE_HELPER_SIMPLE_MODE);\r\n            else\r\n                result.classList.add(CN_CODE_HELPER_NORMAL_MODE);\r\n            result.id = this.id;\r\n            this.component.panel = result;\r\n\r\n            const bgPanel = doc.createElement('div');\r\n            bgPanel.className = CN_CODE_HELPER_PANEL_BACKGROUND + ' outcome';\r\n            result.appendChild(bgPanel);\r\n\r\n            const inputSection = doc.createElement('div');\r\n            inputSection.className = CN_CODE_HELPER_INPUT_SECTION;\r\n\r\n            const thumbnail = doc.createElement('button');\r\n            thumbnail.className = CN_CODE_HELPER_AI_THUMBNAIL + ' btn btn-secondary';\r\n            let innerTextElem = doc.createElement('span');\r\n            innerTextElem.className = CN_CODE_HELPER_BUTTON_TEXT;\r\n            innerTextElem.innerHTML = useSimpleMode? localStrings['codehelper_thumbnail_caption_simple_mode']: localStrings['codehelper_thumbnail_caption'];\r\n            thumbnail.appendChild(innerTextElem);\r\n            let assocElem = doc.createElement('span');\r\n            assocElem.className = CN_CODE_HELPER_BUTTON_ASSOC;\r\n            thumbnail.appendChild(assocElem);\r\n            thumbnail.title = useSimpleMode?\r\n                this._aiHelperPredefinedQuestions[0] || localStrings['codehelper_thumbnail_caption_simple_mode_hint']:\r\n                localStrings['codehelper_thumbnail_hint'];\r\n            thumbnail.onclick = (e) => {\r\n                // this.togglePanel();\r\n                e.preventDefault();\r\n                if (useSimpleMode) {\r\n                    if (!this.isPanelExpanded())\r\n                        this.startViewTransition(self.expandPanel.bind(self));\r\n                    this.requestAiHelper();\r\n                } else {\r\n                    this.startViewTransition(self.togglePanel.bind(self));\r\n                }\r\n            }\r\n            inputSection.appendChild(thumbnail);\r\n            this.component.thumbnail = thumbnail;\r\n\r\n            if (!useSimpleMode) {\r\n                if (!this.readOnly) {\r\n                    // question inputter or selector\r\n                    const datalistContainer = doc.createElement('div');\r\n                    datalistContainer.className = CN_CODE_HELPER_AI_QINPUT_CONTAINER + ' d-md-inline-block position-relative';\r\n                    let inputter;\r\n                    if (enableCustomQuestion) {\r\n                        const datalist = doc.createElement('datalist');\r\n                        datalist.id = this.id + '_input_datalist';\r\n                        // ['能提示我这道题的思路么？', '为什么我的答案错了？', '我要如何改进我目前的代码？']\r\n                        (this._aiHelperPredefinedQuestions || []).forEach(s => {\r\n                            const option = doc.createElement('option');\r\n                            option.value = s;\r\n                            datalist.appendChild(option);\r\n                        });\r\n                        datalistContainer.append(datalist);\r\n\r\n                        inputter = doc.createElement('input');\r\n                        inputter.type = 'text';\r\n                        inputter.setAttribute('list', datalist.id);\r\n                        inputter.onkeypress = (e => {\r\n                            if (e.code === 'Enter') {\r\n                                // this.emulateResponse();\r\n                                this.requestAiHelper();\r\n                                e.preventDefault();\r\n                            }\r\n                        });\r\n                        datalistContainer.appendChild(inputter);\r\n\r\n                        /*\r\n                        const inputterListTrigger = doc.createElement('span');\r\n                        inputterListTrigger.className = 'form-autocomplete-downarrow position-absolute p-1';\r\n                        inputterListTrigger.innerText = '▼';\r\n                        inputterListTrigger.onclick = (e) => {\r\n                            inputter.focus();\r\n                            setTimeout(() => {\r\n                                inputter.showPicker();\r\n                            }, 10);\r\n                        }\r\n                        datalistContainer.appendChild(inputterListTrigger);\r\n                        */\r\n                    } else {\r\n                        inputter = doc.createElement('select');\r\n                        const selectorPlaceholder = doc.createElement('option');\r\n                        selectorPlaceholder.value = '';\r\n                        selectorPlaceholder.innerText = localStrings['codehelper_ask_select_placeholder'];\r\n                        selectorPlaceholder.setAttribute('disabled', 'disabled');\r\n                        selectorPlaceholder.setAttribute('selected', 'selected');\r\n                        inputter.appendChild(selectorPlaceholder);\r\n                        (this._aiHelperPredefinedQuestions || []).forEach(s => {\r\n                            const option = doc.createElement('option');\r\n                            option.value = s;\r\n                            option.innerText = s;\r\n                            inputter.appendChild(option);\r\n                        });\r\n                        inputter.onchange = (e => {\r\n                            this.requestAiHelper();\r\n                            e.preventDefault();\r\n                        });\r\n                        datalistContainer.appendChild(inputter);\r\n                    }\r\n                    inputter.className = CN_CODE_HELPER_AI_QINPUT + ' form-control';\r\n                    inputter.setAttribute('placeholder', localStrings['codehelper_ask_input_placeholder']);\r\n                    inputSection.appendChild(datalistContainer);\r\n                    this.component.inputter = inputter;\r\n                }\r\n\r\n                const btnSubmit = doc.createElement('button');\r\n                btnSubmit.className = CN_CODE_HELPER_INPUT_SUBMITTER + ' btn btn-secondary';\r\n                innerTextElem = doc.createElement('span');\r\n                innerTextElem.className = CN_CODE_HELPER_BUTTON_TEXT;\r\n                innerTextElem.innerHTML = localStrings['codehelper_ask_submit_caption'];\r\n                btnSubmit.appendChild(innerTextElem);\r\n                btnSubmit.title = localStrings['codehelper_ask_submit_hint'];\r\n                btnSubmit.onclick = (e) => {\r\n                    // this.emulateResponse();\r\n                    this.requestAiHelper();\r\n                    e.preventDefault();\r\n                };\r\n                inputSection.appendChild(btnSubmit);\r\n                this.component.submitter = btnSubmit;\r\n            }\r\n            const usageCountReminder = doc.createElement('div');\r\n            usageCountReminder.className = CN_CODE_HELPER_USAGE_COUNT_REMINDER;\r\n            if (this.component.submitter)\r\n                inputSection.insertBefore(usageCountReminder, this.component.submitter);\r\n            else\r\n                inputSection.appendChild(usageCountReminder);\r\n            this.component.usageCountReminder = usageCountReminder;\r\n\r\n            result.appendChild(inputSection);\r\n\r\n            const responder = doc.createElement('div');\r\n            responder.className = CN_CODE_HELPER_AI_RESPONDER;\r\n\r\n            const responderContent = doc.createElement('p');\r\n            responderContent.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT;\r\n            responder.appendChild(responderContent);\r\n            result.appendChild(responder);\r\n            this.component.responder = responder;\r\n            this.component.responderContent = responderContent;\r\n\r\n            if (this.inSimpleMode) {\r\n                const panelToggler = doc.createElement('div');\r\n                panelToggler.className = CN_CODE_HELPER_PANEL_TOGGLER;\r\n                panelToggler.title = localStrings['codehelper_thumbnail_hint'];\r\n                panelToggler.onclick = (e) => {\r\n                    this.startViewTransition(self.togglePanel.bind(self));\r\n                }\r\n                result.appendChild(panelToggler);\r\n            }\r\n\r\n            return result;\r\n        }\r\n        _insertWidgetToDom(doc, widgetElem, placeHolder) {\r\n            // insert the created toolbar element to DOM, replace the placeholder\r\n            const parent = placeHolder.parentNode;\r\n            parent.replaceChild(widgetElem, placeHolder);\r\n            /*\r\n            const refNode = this.targetEditor.nextSibling;\r\n            if (refNode)\r\n                parent.insertBefore(widgetElem, refNode);\r\n            else\r\n                parent.appendChild(widgetElem);\r\n            */\r\n        }\r\n        async _createAndInsertWidget(doc, placeHolderId, {useSimpleMode, enableCustomQuestion}) {\r\n            let placeHolder = doc.getElementById(placeHolderId);\r\n            if (placeHolder) {\r\n                let elem = await this._createWidget(doc, {useSimpleMode, enableCustomQuestion});\r\n                this._insertWidgetToDom(doc, elem, placeHolder);\r\n            }\r\n        }\r\n\r\n        startViewTransition(func, ...args) {\r\n            if (!document.startViewTransition) {\r\n                func(...args);\r\n            } else {\r\n                // 开始一次视图过渡：\r\n                const transition = document.startViewTransition(() => func(...args));\r\n            }\r\n        }\r\n        expandPanel() {\r\n            this.component.panel.classList.remove(CN_CODE_HELPER_COLLAPSED);\r\n            this.component.panel.classList.add(CN_CODE_HELPER_EXPANDED);\r\n            if (this.component.inputter)\r\n                this.component.inputter.focus();\r\n\r\n            if (!this._aiHelperRecordsHistoryRetrieved && this.historyDisplayMode === CodeHelperHistoryDisplayMode.SHOWN_ALL) {\r\n                try {\r\n                    this.requestAiHelperHistoryData();\r\n                } finally {\r\n                    this._aiHelperRecordsHistoryRetrieved = true;\r\n                }\r\n            }\r\n        }\r\n        collapsePanel() {\r\n            this.component.panel.classList.add(CN_CODE_HELPER_COLLAPSED);\r\n            this.component.panel.classList.remove(CN_CODE_HELPER_EXPANDED);\r\n        }\r\n        togglePanel() {\r\n            // this.component.panel.classList.toggle(CODE_HELPER_COLLAPSED);\r\n            // this.component.panel.classList.toggle(CODE_HELPER_EXPANDED);\r\n            if (this.isPanelExpanded())\r\n                this.collapsePanel();\r\n            else\r\n                this.expandPanel();\r\n        }\r\n        isPanelExpanded() {\r\n            return !this.component.panel.classList.contains(CN_CODE_HELPER_COLLAPSED);\r\n        }\r\n\r\n        _stripHtmlTags(content, doc) {\r\n            if (!doc) {\r\n                const elem = this.component.responderContent;\r\n                doc = elem.ownerDocument;\r\n            }\r\n            const dummyElem = doc.createElement('div');\r\n            dummyElem.innerHTML = content;\r\n            return dummyElem.innerText;\r\n        }\r\n        _jsonToFormData(jsonObj) {\r\n            let result = new FormData();\r\n            for (let key of Object.keys(jsonObj)) {\r\n                let value = jsonObj[key];\r\n                if (value instanceof Array) {\r\n                    for (let item of value) {\r\n                        result.append(key, item);\r\n                    }\r\n                } else {\r\n                    result.append(key, value);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        outputLines(lines, outputElem) {\r\n            // console.log('output', lines);\r\n            if (!outputElem)\r\n                outputElem = this.component.responderContent;\r\n            const doc = outputElem.ownerDocument;\r\n            const docFrag = doc.createDocumentFragment();\r\n            // let lastLineElem;\r\n            lines.forEach(line => {\r\n                const elem = doc.createElement('div');\r\n                elem.innerText = line || ' ';\r\n                docFrag.appendChild(elem);\r\n                // lastLineElem = elem;\r\n            });\r\n            outputElem.appendChild(docFrag);\r\n\r\n            setTimeout(() => {\r\n                const scrollElem = this.component.responder;\r\n                scrollElem.scrollTo({top: scrollElem.scrollHeight, behavior: 'smooth'});\r\n                // scrollElem.scrollTop = scrollElem.scrollHeight;\r\n                // console.log(outputElem.scrollTop, outputElem.scrollHeight);\r\n                // lastLineElem.scrollIntoView({block: \"end\", inline: \"nearest\", behavior: \"smooth\"});\r\n            }, 10);\r\n        }\r\n\r\n        outputSection(sectionLines, outputType) {\r\n            const parent = this.component.responderContent;\r\n            const doc = parent.ownerDocument;\r\n            const sectionElem = doc.createElement('section');\r\n            sectionElem.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_SECTION;\r\n            this.outputLines(sectionLines, sectionElem);\r\n            parent.appendChild(sectionElem);\r\n        }\r\n\r\n        // emulate the AI response\r\n        getEmulatedResponseTextLines() {\r\n            let result = [];\r\n\r\n            result.push('服务器返回的回答将在这里显示。');\r\n            result.push('');\r\n            result.push('注意：当前不会完成实际工作，仅是模拟AI helper的输出。');\r\n            result.push('与题目相关的以下各项数据将被发送至服务器，进而获取服务器响应：');\r\n            result.push('');\r\n\r\n            result.push('[Current answer]');\r\n            const answer = this.currAnswer || '<empty>';\r\n            result = result.concat(answer.split('\\n'));\r\n\r\n            result.push('[Question]');\r\n            const sQuestion = JSON.stringify(this.questionData, null, '  ');\r\n            result = result.concat(sQuestion.split('\\n'));\r\n\r\n            result.push('[Last Attempt]')\r\n            const sAttempt = JSON.stringify(this.lastAttemptData, null, '  ');\r\n            result = result.concat(sAttempt.split('\\n'));\r\n\r\n            result.push('[Output End]')\r\n\r\n            return result;\r\n        }\r\n\r\n        emulateResponse() {\r\n            const batchLineCount = {min: 3, max: 7};\r\n            const batchDuration = {min: 500, max: 1500};\r\n            const outputLines = this.getEmulatedResponseTextLines();\r\n\r\n            // console.log('outputlines', outputLines);\r\n\r\n            let currLineIndex = 0;\r\n            let self = this;\r\n\r\n            function responseStep() {\r\n                const lineCount = Math.round(Math.random() * (batchLineCount.max - batchLineCount.min)) + batchLineCount.min;\r\n                const delay = Math.round(Math.random() * (batchDuration.max - batchDuration.min)) + batchDuration.min;\r\n                // console.log('step', currLineIndex, lineCount, delay);\r\n                setTimeout(() => {\r\n                    const lines = outputLines.slice(currLineIndex, currLineIndex + lineCount);\r\n                    self.outputLines(lines);\r\n                    currLineIndex += lineCount;\r\n                    if (currLineIndex < outputLines.length)\r\n                        responseStep();\r\n                }, delay);\r\n            }\r\n            responseStep();\r\n        }\r\n\r\n        // interface to AI helper server\r\n\r\n        async requestAiHelper_old(userQuestion = '') {\r\n            if (!userQuestion)\r\n                userQuestion = this.component.inputter.value;\r\n\r\n            if (this.aiRequestUrl) {\r\n                // extract data to send to server\r\n                const questionBody = this._stripHtmlTags(this.questionData['questiontext']);\r\n                const questionLanguage = this.questionData['language'];\r\n                const testCases = this.questionData['testcases'];\r\n                const userCode = this.currAnswer;\r\n\r\n                const data = {\r\n                    questionBody, questionLanguage, testCases, userCode, userQuestion,\r\n                    omitCodeSnippet: true\r\n                };\r\n\r\n                // console.log('send to AI server', this.aiServerUrl, data);\r\n\r\n                let response = await fetch(this.aiRequestUrl, {\r\n                    method: 'post',\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n                if (response.ok) {\r\n                    const result = await response.json();\r\n                    // console.log('the result', result);\r\n                    if (result.success) {\r\n                        const output = result.result.response;\r\n                        this.outputSection(output.split('\\n'));\r\n                    } else {\r\n                        console.error(result.message);\r\n                        this.outputSection([result.message], 'Error');\r\n                    }\r\n                } else {\r\n                    // throw new Error('fetch failed');\r\n                    console.error('Fetch failed');\r\n                    this.outputSection(['Fetch failed'], 'Error');\r\n                }\r\n            }\r\n        }\r\n\r\n        async requestAiHelper() {\r\n            if (this.readOnly)\r\n                return;\r\n\r\n            const localStrings = await localResManager.getLocalStrings([\r\n                'err_code_helper_empty_ask',\r\n                'err_code_helper_server_fetch_failed',\r\n                'err_code_helper_usage_count_exceeded'\r\n            ]);\r\n\r\n            if (this.isAiHelperUsageCountExceeded()) {\r\n                await this.pushAiHelperRecord({id: null, userQuestion: '', response: localStrings['err_code_helper_usage_count_exceeded'], state: AiHelperDataRecord.STATE_REJECTED});\r\n                return;\r\n            }\r\n\r\n            const userQuestion = this.inSimpleMode?\r\n                this._aiHelperPredefinedQuestions[0]:\r\n                (this.component.inputter && this.component.inputter.value);\r\n            const userQuestionIndex = (!this.enableCustomQuestion && this.component.inputter)?\r\n                (this.component.inputter.selectedIndex - 1): null;\r\n\r\n            if (!userQuestion && !userQuestionIndex) {  // asked nothing, do not send request to server, just response with error\r\n                await this.pushAiHelperRecord({id: null, userQuestion: '', response: localStrings['err_code_helper_empty_ask'], state: AiHelperDataRecord.STATE_REJECTED});\r\n                // console.error(localStrings['err_code_helper_empty_ask']);\r\n                return;\r\n            }\r\n\r\n            if (this.aiRequestUrl) {\r\n                if (this.requestAiHelper.isFetching)\r\n                    return;\r\n\r\n                this.requestAiHelper.isFetching = true;\r\n\r\n                // extract data to send to server\r\n                const cmId = this.questionData.cmId;\r\n                const questionAttemptId = this.questionData.questionAttemptId;\r\n                const questionAttemptStepId = this.questionData.questionAttemptStepId;\r\n                const questionUsageId = this.questionData.questionUsageId;\r\n                const questionSlot = this.questionData.slot;\r\n                const userCode = this.currAnswer;\r\n\r\n                const data = {\r\n                    cm: cmId,\r\n                    question_attempt: questionAttemptId,\r\n                    question_attempt_step: questionAttemptStepId,\r\n                    question_usage: questionUsageId,\r\n                    slot: questionSlot,\r\n                    user_code: userCode,\r\n                    omitCodeSnippet: true\r\n                };\r\n                if (this._enableCustomQuestion)\r\n                    data.user_question = userQuestion;\r\n                else\r\n                    data.user_question_index = userQuestionIndex;\r\n\r\n                // console.log('send to AI server', this.aiRequestUrl, data);\r\n                const currAiHelperRecordId = await this.pushAiHelperRecord({id: null, userQuestion});\r\n\r\n                try {\r\n                    let response = await fetch(this.aiRequestUrl, {\r\n                        method: 'post',\r\n                        credentials: 'include',  // IMPORTANT, post cross-site cookies to server, handling the http/https mangling of *.cpu.edu.cn\r\n                        /*\r\n                        headers: {\r\n                            'Content-Type': 'application/json;charset=utf-8'\r\n                        },\r\n                        */\r\n                        body: this._jsonToFormData(data) //JSON.stringify(data)\r\n                    });\r\n                    if (response.ok) {\r\n                        const result = await response.json();\r\n                        // console.log('the result', result);\r\n                        if (result.success) {\r\n                            const output = result.result.response;\r\n                            const newResponseId = ((result.result.id !== null) || (result.result.id !== undefined)) ? result.result.id : undefined;\r\n                            // this.outputSection(output.split('\\n'));\r\n                            this.updateAiHelperRecord(currAiHelperRecordId, {\r\n                                dbId: newResponseId,\r\n                                response: output,\r\n                                state: AiHelperDataRecord.STATE_FULFILLED\r\n                            });\r\n                        } else {\r\n                            console.error(result.message);\r\n                            // this.outputSection([result.message], 'Error');\r\n                            this.updateAiHelperRecord(currAiHelperRecordId, {\r\n                                response: result.message,\r\n                                state: AiHelperDataRecord.STATE_REJECTED\r\n                            });\r\n                        }\r\n\r\n                        if (result.result && typeof (result.result.remainingUsageCount) === 'number') {\r\n                            // server returns a remaining usage count info, update the internal property\r\n                            this.aiHelperRemainingUsageCount = result.result.remainingUsageCount;\r\n                        } else {\r\n                            this.decreaseRemainingUsageCount();\r\n                        }\r\n\r\n                    } else {\r\n                        // throw new Error('fetch failed');\r\n                        console.error(localStrings['err_code_helper_server_fetch_failed']);\r\n                        // this.outputSection([localStrings['err_code_helper_server_fetch_failed']], 'Error');\r\n                        this.updateAiHelperRecord(currAiHelperRecordId, {\r\n                            response: localStrings['err_code_helper_server_fetch_failed'],\r\n                            state: AiHelperDataRecord.STATE_REJECTED\r\n                        });\r\n                    }\r\n                } catch(e) {\r\n                    console.error(e.message);\r\n                    this.updateAiHelperRecord(currAiHelperRecordId, {\r\n                        response: e.message,\r\n                        state: AiHelperDataRecord.STATE_REJECTED\r\n                    });\r\n                } finally {\r\n                    this.requestAiHelper.isFetching = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        async rateAiHelperResponse(id, responseDbId, value) {\r\n            if (this.aiRateUrl) {\r\n                const localStrings = await localResManager.getLocalStrings([\r\n                    'err_code_helper_server_fetch_failed'\r\n                ]);\r\n\r\n                const data = {\r\n                    // cm: this.questionData.cmId,\r\n                    // question_attempt: this.questionData.questionAttemptId,\r\n                    // question_attempt_step: this.questionData.questionAttemptStepId,\r\n                    question_usage: this.questionData.questionUsageId,\r\n                    slot: this.questionData.slot,\r\n                    id: responseDbId,\r\n                    value: value,\r\n                    mode: 'set'\r\n                }\r\n                let response = await fetch(this.aiRateUrl, {\r\n                    method: 'post',\r\n                    credentials: 'include',\r\n                    body: this._jsonToFormData(data)\r\n                });\r\n                if (response.ok) {\r\n                    const result = await response.json();\r\n                    if (result.success) {\r\n                        const newRate = result.result;\r\n                        console.log('rated', responseDbId, newRate);\r\n                        this.updateAiHelperRecord(responseDbId, {userRating: newRate});\r\n                    } else {\r\n                        throw new Error(result.message);\r\n                    }\r\n                } else {\r\n                    throw new Error(localStrings['err_code_helper_server_fetch_failed'])\r\n                }\r\n            }\r\n        }\r\n\r\n        async requestAiHelperHistoryData() {\r\n            if (this.aiRequestUrl) {\r\n                const data = {\r\n                    cm: this.questionData.cmId,\r\n                    question_attempt: this.questionData.questionAttemptId,\r\n                    question_attempt_step: this.questionData.questionAttemptStepId,\r\n                    question_usage: this.questionData.questionUsageId,\r\n                    slot: this.questionData.slot,\r\n                    history: true\r\n                };\r\n\r\n                let response = await fetch(this.aiRequestUrl, {\r\n                    method: 'post',\r\n                    credentials: 'include',\r\n                    body: this._jsonToFormData(data)\r\n                });\r\n                if (response.ok) {\r\n                    const result = await response.json();\r\n                    // console.log('the result', result);\r\n                    if (result.success) {\r\n                        const historyItems = result.result || [];\r\n                        historyItems.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n                        const historyRecords = historyItems.map((item, index) => {\r\n                            const id = (item.id === undefined)? ('his-' + index): item.id;\r\n                            return new AiHelperDataRecord(id, {\r\n                                dbId: item.id,\r\n                                userQuestion: item.user_question,\r\n                                response: item.response,\r\n                                userRating: item.user_rating,\r\n                                state: AiHelperDataRecord.STATE_FULFILLED\r\n                            });\r\n                        });\r\n                        // put history items at the head of current record list\r\n                        this._aiHelperRecords.data.unshift(...historyRecords);\r\n                        await this.repaintAiHelperRecords();\r\n\r\n                        if (!historyItems.length && this.readOnly) {\r\n                            // if the history is empty and currently in review mode,\r\n                            // add an empty item to explicit tells the reviewer that these is no history item\r\n                            localResManager.getLocalStrings([\r\n                                'codehelper_no_history_item',\r\n                            ]).then(localStrings => {\r\n                                this.pushAiHelperRecord({id:null, userQuestion: '', response: localStrings['codehelper_no_history_item'], state: AiHelperDataRecord.STATE_FULFILLED});\r\n                            });\r\n                        }\r\n                    } else {\r\n                        console.error(result.message);\r\n                    }\r\n                } else {\r\n                    console.error(localStrings['err_code_helper_server_fetch_failed']);\r\n                    this.updateAiHelperRecord(currAiHelperRecordId, {response: localStrings['err_code_helper_server_fetch_failed'], state: AiHelperDataRecord.STATE_REJECTED});\r\n                }\r\n            }\r\n        }\r\n\r\n        decreaseRemainingUsageCount() {\r\n            if (this.readOnly)\r\n                return;\r\n\r\n            if (typeof(this.aiHelperRemainingUsageCount) === 'number') {\r\n                if (this.aiHelperRemainingUsageCount > 0)\r\n                    this.aiHelperRemainingUsageCount--;\r\n            }\r\n        }\r\n\r\n        // methods about ai helper record display\r\n        async pushAiHelperRecord({id, dbId, userQuestion = null, response = null, state = AiHelperDataRecord.STATE_PENDING}) {\r\n            if (this.historyDisplayMode === CodeHelperHistoryDisplayMode.SHOWN_ACTIVE) {\r\n                // only preserve the latest record, clear all olds\r\n                this._aiHelperRecords.clear();\r\n                await this.repaintAiHelperRecords();\r\n            }\r\n            return this._aiHelperRecords.push(id, {dbId, userQuestion, response, state});\r\n        }\r\n        updateAiHelperRecord(id, {dbId, userQuestion = undefined, response = undefined, state = undefined}) {\r\n            return this._aiHelperRecords.updateRecord(id, {dbId, userQuestion, response, state});\r\n        }\r\n        async repaintAiHelperRecords() {\r\n            const rootElem = this._component.responderContent;\r\n            rootElem.innerHTML = '';\r\n\r\n            for (let record of this._aiHelperRecords.data) {\r\n                await this.updateAiHelperRecordOnElem(record.id, record);\r\n            }\r\n\r\n            this.requestScrollToResponderBottom();\r\n        }\r\n\r\n        async reactAiHelperRecordsUpdate(id, record) {\r\n            await this.updateAiHelperRecordOnElem(id, record);\r\n            this.requestScrollToResponderBottom();\r\n        }\r\n\r\n        requestScrollToResponderBottom() {\r\n            setTimeout(() => {\r\n                const scrollElem = this.component.responder;\r\n                scrollElem.scrollTo({top: scrollElem.scrollHeight, behavior: 'smooth'});\r\n            }, 10);\r\n        }\r\n\r\n        _needToDisplayAiHelperRecordUserAskedQuestion() {\r\n            return !(this.historyDisplayMode === CodeHelperHistoryDisplayMode.SHOWN_ACTIVE && this.inSimpleMode)\r\n        }\r\n        async updateAiHelperRecordOnElem(/*groupId,*/ recordId, record) {\r\n            const rootElem = this._component.responderContent;\r\n            const doc = rootElem.ownerDocument;\r\n\r\n            // check if an element of this record id already exists\r\n            // if so, we need to update this element, otherwise create a new one\r\n            let recordElem = rootElem.querySelector(`section[data-record-id=\"${recordId}\"]`);\r\n            if (!recordElem) {   // create new elem and child elements\r\n                recordElem = doc.createElement('section');\r\n                recordElem.setAttribute('data-record-id', recordId);\r\n\r\n                if (this._needToDisplayAiHelperRecordUserAskedQuestion()) {\r\n                    const elemUserQuestion = doc.createElement('p');\r\n                    elemUserQuestion.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_QUESTION;\r\n                    /*\r\n                    elemUserQuestion.innerText = record.userQuestion;\r\n                    if (!record.userQuestion)\r\n                        elemUserQuestion.classList.add(CODE_HELPER_ELEM_HIDE);\r\n                    else\r\n                        elemUserQuestion.classList.remove(CODE_HELPER_ELEM_HIDE);\r\n                    */\r\n                    recordElem.appendChild(elemUserQuestion);\r\n                }\r\n\r\n                const elemResponse = doc.createElement('p');\r\n                elemResponse.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE;\r\n                // elemResponse.innerText = record.response;\r\n                recordElem.appendChild(elemResponse);\r\n\r\n                if (this.enableUserRating || this.enableViewUserRating) {\r\n                    const elemUserRating = doc.createElement('div')\r\n                    elemUserRating.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_RATING;\r\n                    const localStrings = await localResManager.getLocalStrings([\r\n                        'codehelper_user_rate_positive',\r\n                        'codehelper_user_rate_negative'\r\n                    ]);\r\n\r\n                    // rating widget of record\r\n                    const ratingWidget = new UserRatingWidget(doc, elemUserRating, true);\r\n                    ratingWidget.onchange = async (widget, newValue, oldValue) => {\r\n                        try {\r\n                            await this.rateAiHelperResponse(record.id, record.dbId, newValue);\r\n                        } catch (e) {\r\n                            // failed, reverse to old value\r\n                            ratingWidget.value = oldValue;\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                    recordElem._ratingWidget = ratingWidget;\r\n                    recordElem.appendChild(elemUserRating);\r\n                }\r\n\r\n                rootElem.appendChild(recordElem);\r\n            }\r\n            {  // update content of elem\r\n                const hasDbId = record.dbId || record.dbId === 0;\r\n                if (!hasDbId)\r\n                    recordElem.removeAttribute('data-db-id');\r\n                else\r\n                    recordElem.setAttribute('data-db-id', record.dbId);\r\n\r\n                const elemUserQuestion = recordElem.getElementsByClassName(CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_QUESTION)[0];\r\n                if (elemUserQuestion) {\r\n                    elemUserQuestion.innerText = record.userQuestion;\r\n                    if (!record.userQuestion)\r\n                        elemUserQuestion.classList.add(CN_CODE_HELPER_ELEM_HIDE);\r\n                    else\r\n                        elemUserQuestion.classList.remove(CN_CODE_HELPER_ELEM_HIDE);\r\n                }\r\n\r\n                const elemResponse = recordElem.getElementsByClassName(CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE)[0];\r\n                // elemResponse.innerText = record.response;\r\n                this._updateAiHelperResponseOnElem(doc, elemResponse, record.response);\r\n\r\n                const elemUserRating = recordElem.getElementsByClassName(CN_CODE_HELPER_AI_RESPONDER_CONTENT_USER_RATING)[0];\r\n                if (elemUserRating) {\r\n                    this.startViewTransition(() => {\r\n                        const displayUserRating = (record.state === AiHelperDataRecord.STATE_FULFILLED && hasDbId)\r\n                            && (this.enableUserRating || (this.enableViewUserRating && record.userRating))\r\n                        if (displayUserRating) {\r\n                            elemUserRating.classList.remove(CN_CODE_HELPER_ELEM_HIDE);\r\n                        } else {\r\n                            elemUserRating.classList.add(CN_CODE_HELPER_ELEM_HIDE);\r\n                        }\r\n                        if (recordElem._ratingWidget) {\r\n                            recordElem._ratingWidget.value = record.userRating;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            // update elem state\r\n            const elemStateClass = (record.state === AiHelperDataRecord.STATE_PENDING)? CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_PENDING:\r\n                (record.state === AiHelperDataRecord.STATE_REJECTED)? CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_REJECTED:\r\n                    CN_CODE_HELPER_AI_RESPONDER_SECTION_STATE_FULFILLED;\r\n            recordElem.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_SECTION + ' ' + elemStateClass;\r\n        }\r\n        _updateAiHelperResponseOnElem(doc, elemResponse, response) {\r\n            // console.log('_updateAiHelperResponseOnElem', response);\r\n            if (!response) {\r\n                // empty response, just clear\r\n                elemResponse.innerText = '';\r\n            } else if (typeof(response) !== 'object') {\r\n                // simple string\r\n                elemResponse.innerText = response;\r\n            } else {\r\n                // structurized response, actually an array of sections\r\n                elemResponse.innerText = '';  // clear old first\r\n                for (let section of response) {\r\n                    if (!section)\r\n                        continue;\r\n                    const elemSection = doc.createElement('section');\r\n                    elemSection.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION;\r\n                    if (section.title) {\r\n                        const elemTitle = doc.createElement('h3');\r\n                        elemTitle.className = CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_TITLE;\r\n                        elemTitle.innerText = section.title;\r\n                        elemSection.appendChild(elemTitle);\r\n                    }\r\n                    if (section.contents) {\r\n                        const elemContent = doc.createElement('div');\r\n                        elemContent.className = section.is_code_snippet?\r\n                            CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CODE:\r\n                            CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CONTENT;\r\n                        if (section.is_code_omitted)\r\n                            elemContent.className += ' ' + CN_CODE_HELPER_AI_RESPONDER_CONTENT_RESPONSE_SECTION_CODE_OMITTED;\r\n                        elemContent.innerText = section.contents.join('\\n');\r\n                        elemSection.appendChild(elemContent);\r\n\r\n                        if (section.is_code_snippet && !section.is_code_omitted && window.ace) {\r\n                            // since coderunner uses ace as editor, we can highlight the code with ace now\r\n                            const aceOptions = {\r\n                                selectionStyle: \"text\",\r\n                                readOnly: true,\r\n                                minLines: 2,\r\n                                maxLines: 999\r\n                            };\r\n                            if (section.code_language)\r\n                                aceOptions.mode = this._getAceEditorModeOption(section.code_language);\r\n                            setTimeout(() => {\r\n                                // console.log('initialize ace editor', aceOptions);\r\n                                // alert(elemContent.innerText);\r\n                                const editor = window.ace.edit(elemContent, aceOptions);\r\n                                editor.session.setValue(section.contents.join('\\n') + '\\n');  // add a tailing blank line for better display\r\n                            }, 50);\r\n                        }\r\n                    }\r\n                    elemResponse.appendChild(elemSection);\r\n                }\r\n            }\r\n        }\r\n        _getAceEditorModeOption(codeSectionLanguage) {\r\n            const prefix = 'ace/mode/';\r\n            const map = {\r\n                'nodejs': 'javascript',\r\n                'js': 'javascript',\r\n                'python3': 'python',\r\n                'python2': 'python',\r\n                'delphi': 'pascal'\r\n            }\r\n            const lanName = map[codeSectionLanguage] || codeSectionLanguage;\r\n            return prefix + lanName;\r\n        }\r\n\r\n        isAiHelperUsageCountExceeded() {\r\n            const value = this.aiHelperRemainingUsageCount;\r\n            if (typeof(value) === 'number') {\r\n                return value <= 0;\r\n            } else\r\n                return false;\r\n        }\r\n\r\n        // properties\r\n        get id() {\r\n            return this._id;\r\n        }\r\n        get targetEditor() {\r\n            return this._targetEditor || this._targetRawEditor;\r\n        }\r\n        get component() {\r\n            return this._component;\r\n        }\r\n        get enableUserRating() {\r\n            return this._enableUserRating && !this.readOnly;\r\n        }\r\n        get enableViewUserRating() {\r\n            // in review mode, we display rating results\r\n            return this.enableUserRating || this.readOnly;\r\n        }\r\n        get readOnly() {\r\n            return this._readOnly;\r\n        }\r\n        get historyDisplayMode() {\r\n            if (this.readOnly)\r\n                return CodeHelperHistoryDisplayMode.SHOWN_ALL;\r\n            else\r\n                return this._historyDisplayMode;\r\n        }\r\n        get inSimpleMode() {\r\n            return this._simpleMode;\r\n        }\r\n\r\n        get currAnswer() {\r\n            return this._targetRawEditor?.value;\r\n        }\r\n        get questionData() {\r\n            // return this._qMetaData.questionData;\r\n            return this._qMetaData;\r\n        }\r\n        get lastAttemptData() {\r\n            // return this._qMetaData.lastAttemptStepData;\r\n            return [];\r\n        }\r\n\r\n        get aiRequestUrl() {\r\n            return this._aiRequestUrl;\r\n        }\r\n        get aiRateUrl() {\r\n            return this._aiRateUrl;\r\n        }\r\n\r\n        get aiHelperRemainingUsageCount() {\r\n            return this._aiHelperRemainingUsageCount;\r\n        }\r\n        set aiHelperRemainingUsageCount(value) {\r\n            this._aiHelperRemainingUsageCount = value;\r\n            if (typeof(value) === 'number') {\r\n                if (this.component.usageCountReminder) {\r\n                    const displayedValue = (value > 99) ? '99+' : value;\r\n                    // update this.component.usageCountReminder\r\n                    this.component.usageCountReminder.classList.remove('Hidden');\r\n                    this.component.usageCountReminder.innerText = displayedValue;\r\n                    localResManager.getLocalStrings([\r\n                        'codehelper_ai_usage_count_reminder_hint'\r\n                    ]).then(\r\n                        localStrings => {\r\n                            this.component.usageCountReminder.title = localStrings['codehelper_ai_usage_count_reminder_hint'].replace('{}', value);\r\n                        }\r\n                    );\r\n                }\r\n                // if exceeded, disable the inputter and submit button\r\n                if (this.component.submitter) {\r\n                    this.component.submitter.disabled = this.isAiHelperUsageCountExceeded();\r\n                }\r\n                if (this.component.inputter) {\r\n                    this.component.inputter.disabled = this.isAiHelperUsageCountExceeded();\r\n                }\r\n            } else {\r\n                if (this.component.usageCountReminder)\r\n                    this.component.usageCountReminder.classList.add('Hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function init({codeHelperPlaceHolderId, questionMetaElemId, targetEditorId, codeHelperInSimpleMode,\r\n                      aiHelperRequestUrl, aiHelperRateUrl, aiHelperPredefinedQuestions,\r\n                      aiHelperRemainingUsageCount,\r\n                      historyDisplayMode, enableCustomQuestion, enableUserRating, readOnly\r\n                  }) {\r\n        // console.log('init', aiHelperRateUrl, codeHelperPlaceHolderId, questionMetaElemId, targetEditorId, aiHelperRequestUrl, aiHelperPredefinedQuestions);\r\n        return new CodeHelper(document, {\r\n            placeHolderId: codeHelperPlaceHolderId,\r\n            targetEditorId,\r\n            questionDataEmbedderId: questionMetaElemId,\r\n            aiRequestUrl: aiHelperRequestUrl,\r\n            aiRateUrl: aiHelperRateUrl,\r\n            aiHelperPredefinedQuestions,\r\n            aiHelperRemainingUsageCount,\r\n            enableCustomQuestion,\r\n            enableUserRating,\r\n            readOnly,\r\n            historyDisplayMode,\r\n            useSimpleMode: codeHelperInSimpleMode\r\n        });\r\n    }\r\n\r\n    // export { CodeHelper, init };\r\n\r\n    return {\r\n        CodeHelper,\r\n        init\r\n    }\r\n});"],"names":["define","localResManager","CodeHelperHistoryDisplayMode","AiHelperDataRecord","constructor","id","userQuestion","response","userRating","dbId","state","STATE_PENDING","_id","update","_onupdate","undefined","this","_dbId","_userQuestion","_response","_userRating","_state","onupdate","value","callback","AiHelperDataRecordList","_data","_reactRecordUpdate","record","getRecordById","find","push","Date","now","length","data","bind","updateRecord","oldId","clear","get","index","UserRatingWidget","doc","parentElem","rateOnlyOnce","initialValue","_rateOnlyOnce","_value","_createElems","then","elem","_elem","appendChild","result","createElement","className","labelElem","ratingParent","localStrings","getLocalStrings","text","title","forEach","prop","item","classList","add","setAttribute","textElem","innerText","onclick","_reactRateLinkClick","_updateWithRatingStatus","targetElem","isRated","remove","querySelector","querySelectorAll","link","parseInt","getAttribute","event","target","currentTarget","rating","oldValue","onchange","newValue","CodeHelper","placeHolderId","targetEditorId","questionDataEmbedderId","aiRequestUrl","aiRateUrl","aiHelperPredefinedQuestions","aiHelperRemainingUsageCount","enableCustomQuestion","enableUserRating","readOnly","historyDisplayMode","useSimpleMode","_readOnly","_historyDisplayMode","_simpleMode","_aiRequestUrl","_aiRateUrl","_aiHelperPredefinedQuestions","_targetRawEditor","_getTargetRawCodeEditorElem","_targetEditor","_getTargetCodeEditorWrapperElem","_component","_qMetaData","_retrieveQuestionMetaData","_enableCustomQuestion","_enableUserRating","_aiHelperRecords","reactAiHelperRecordsUpdate","_aiHelperRecordsHistoryRetrieved","_createAndInsertWidget","getElementById","questionAttemptId","questionAttemptStepId","questionUsageId","slot","cmId","rawId","wrapperId","self","CN_CODE_HELPER","component","panel","bgPanel","CN_CODE_HELPER_PANEL_BACKGROUND","inputSection","thumbnail","CN_CODE_HELPER_AI_THUMBNAIL","innerTextElem","innerHTML","assocElem","e","preventDefault","isPanelExpanded","startViewTransition","expandPanel","requestAiHelper","togglePanel","datalistContainer","inputter","CN_CODE_HELPER_AI_QINPUT_CONTAINER","datalist","s","option","append","type","onkeypress","code","selectorPlaceholder","CN_CODE_HELPER_AI_QINPUT","btnSubmit","CN_CODE_HELPER_INPUT_SUBMITTER","submitter","usageCountReminder","insertBefore","responder","responderContent","inSimpleMode","panelToggler","_insertWidgetToDom","widgetElem","placeHolder","parentNode","replaceChild","_createWidget","func","args","document","focus","SHOWN_ALL","requestAiHelperHistoryData","collapsePanel","contains","_stripHtmlTags","content","ownerDocument","dummyElem","_jsonToFormData","jsonObj","FormData","key","Object","keys","Array","outputLines","lines","outputElem","docFrag","createDocumentFragment","line","setTimeout","scrollElem","scrollTo","top","scrollHeight","behavior","outputSection","sectionLines","outputType","parent","sectionElem","getEmulatedResponseTextLines","answer","currAnswer","concat","split","sQuestion","JSON","stringify","questionData","sAttempt","lastAttemptData","emulateResponse","batchLineCount","batchDuration","currLineIndex","responseStep","lineCount","Math","round","random","delay","slice","questionBody","questionLanguage","testCases","userCode","omitCodeSnippet","fetch","method","headers","body","ok","json","success","output","console","error","message","isAiHelperUsageCountExceeded","pushAiHelperRecord","STATE_REJECTED","userQuestionIndex","selectedIndex","isFetching","cm","question_attempt","question_attempt_step","question_usage","user_code","user_question","user_question_index","currAiHelperRecordId","credentials","newResponseId","updateAiHelperRecord","STATE_FULFILLED","remainingUsageCount","decreaseRemainingUsageCount","responseDbId","mode","Error","newRate","log","history","historyItems","sort","a","b","timestamp","historyRecords","map","user_rating","unshift","repaintAiHelperRecords","SHOWN_ACTIVE","updateAiHelperRecordOnElem","requestScrollToResponderBottom","_needToDisplayAiHelperRecordUserAskedQuestion","recordId","rootElem","recordElem","elemUserQuestion","elemResponse","enableViewUserRating","elemUserRating","ratingWidget","async","widget","rateAiHelperResponse","_ratingWidget","hasDbId","removeAttribute","getElementsByClassName","_updateAiHelperResponseOnElem","elemStateClass","CN_CODE_HELPER_AI_RESPONDER_CONTENT_SECTION","section","elemSection","elemTitle","contents","elemContent","is_code_snippet","is_code_omitted","join","window","ace","aceOptions","selectionStyle","minLines","maxLines","code_language","_getAceEditorModeOption","edit","session","setValue","codeSectionLanguage","targetEditor","_this$_targetRawEdito","_aiHelperRemainingUsageCount","displayedValue","replace","disabled","init","codeHelperPlaceHolderId","questionMetaElemId","codeHelperInSimpleMode","aiHelperRequestUrl","aiHelperRateUrl"],"mappings":"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"}