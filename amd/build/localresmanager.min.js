define("qtype_coderunnerex/localresmanager",["core/str"],(function(CoreStr){const localResManager=new class{constructor(){this._localRes={}}async _getLocalString(stringId){let componentName=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"coderunnerex",result=this._getCachedLocalString(stringId,componentName);return void 0!==result||(result=await CoreStr.get_string(stringId,componentName),this._setCachedLocalString(stringId,componentName,result)),result}async getLocalStrings(stringIds){let componentName=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"qtype_coderunnerex",result={};const uncachedIds=[];for(const stringId of stringIds)result[stringId]=this._getCachedLocalString(stringId,componentName),void 0===result[stringId]&&uncachedIds.push(stringId);const params=uncachedIds.map((id=>({key:id,component:componentName}))),fetchResult=await CoreStr.get_strings(params);return uncachedIds.forEach(((id,index)=>{result[id]=fetchResult[index],this._setCachedLocalString(id,componentName,fetchResult[index])})),result}_getCachedLocalString(stringId,componentName){const key="".concat(componentName,":").concat(stringId);return this._localRes[key]}_setCachedLocalString(stringId,componentName,value){const key="".concat(componentName,":").concat(stringId);this._localRes[key]=value}};return{localResManager:localResManager}}));

//# sourceMappingURL=localresmanager.min.js.map