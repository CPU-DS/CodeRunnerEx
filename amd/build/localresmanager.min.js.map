{"version":3,"file":"localresmanager.min.js","sources":["../src/localresmanager.js"],"sourcesContent":["define(['core/str'], function(CoreStr) {\r\n    /**\r\n     * A special class to manage the localization strings from Moodle.\r\n     */\r\n    class LocalResManager {\r\n        constructor() {\r\n            this._localRes = {};\r\n        }\r\n        // methods about retrieving localization strings from PHP server\r\n        async _getLocalString(stringId, componentName = 'coderunnerex') {\r\n            let result = this._getCachedLocalString(stringId, componentName);\r\n            if (result !== undefined)\r\n                return result;\r\n\r\n            // load Moodle Local Strings by AJAX\r\n            result = await CoreStr.get_string(stringId, componentName);\r\n            this._setCachedLocalString(stringId, componentName, result);\r\n            return result;\r\n        }\r\n        async getLocalStrings(stringIds, componentName = 'qtype_coderunnerex') {\r\n            let result = {};\r\n            const uncachedIds = [];\r\n            for (const stringId of stringIds) {\r\n                result[stringId] = this._getCachedLocalString(stringId, componentName);\r\n                if (result[stringId] === undefined)\r\n                    uncachedIds.push(stringId);\r\n            }\r\n            const params = uncachedIds.map(id => { return {key: id, component: componentName} });\r\n            // console.log('string params', params);\r\n            // console.log(await CoreStr.get_string(params[0].key, params[0].component), await CoreStr.get_string('pluginname', 'qtype_coderunnerex'));\r\n            const fetchResult = await CoreStr.get_strings(params);\r\n            uncachedIds.forEach((id, index) => {\r\n                result[id] = fetchResult[index];\r\n                this._setCachedLocalString(id, componentName, fetchResult[index]);\r\n            });\r\n            return result;\r\n        }\r\n        _getCachedLocalString(stringId, componentName) {\r\n            const key = `${componentName}:${stringId}`;\r\n            return this._localRes[key];\r\n        }\r\n        _setCachedLocalString(stringId, componentName, value) {\r\n            const key = `${componentName}:${stringId}`;\r\n            this._localRes[key] = value;\r\n        }\r\n    }\r\n    const localResManager = new LocalResManager();\r\n\r\n    return { localResManager };\r\n});"],"names":["define","CoreStr","localResManager","constructor","_localRes","stringId","componentName","result","this","_getCachedLocalString","undefined","get_string","_setCachedLocalString","stringIds","uncachedIds","push","params","map","id","key","component","fetchResult","get_strings","forEach","index","value"],"mappings":"AAAAA,4CAAO,CAAC,aAAa,SAASC,eA8CpBC,gBAAkB,UAzCpBC,mBACSC,UAAY,yBAGCC,cAAUC,qEAAgB,eACxCC,OAASC,KAAKC,sBAAsBJ,SAAUC,2BACnCI,IAAXH,SAIJA,aAAeN,QAAQU,WAAWN,SAAUC,oBACvCM,sBAAsBP,SAAUC,cAAeC,SAJzCA,6BAOOM,eAAWP,qEAAgB,qBACzCC,OAAS,SACPO,YAAc,OACf,MAAMT,YAAYQ,UACnBN,OAAOF,UAAYG,KAAKC,sBAAsBJ,SAAUC,oBAC/BI,IAArBH,OAAOF,WACPS,YAAYC,KAAKV,gBAEnBW,OAASF,YAAYG,KAAIC,KAAe,CAACC,IAAKD,GAAIE,UAAWd,kBAG7De,kBAAoBpB,QAAQqB,YAAYN,eAC9CF,YAAYS,SAAQ,CAACL,GAAIM,SACrBjB,OAAOW,IAAMG,YAAYG,YACpBZ,sBAAsBM,GAAIZ,cAAee,YAAYG,WAEvDjB,OAEXE,sBAAsBJ,SAAUC,qBACtBa,cAASb,0BAAiBD,iBACzBG,KAAKJ,UAAUe,KAE1BP,sBAAsBP,SAAUC,cAAemB,aACrCN,cAASb,0BAAiBD,eAC3BD,UAAUe,KAAOM,cAKvB,CAAEvB,gBAAAA"}